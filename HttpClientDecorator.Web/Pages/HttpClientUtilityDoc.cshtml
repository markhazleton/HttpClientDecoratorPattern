@page
@model HttpClientUtilityDocModel
@{
    ViewData["Title"] = "WebSpark.HttpClientUtility Documentation";
}

<div class="container mt-4">
    <div class="row">
        <div class="col-lg-8">
            <div class="card border-primary mb-4 shadow">
                <div class="card-header bg-primary text-white">
                    <h1 class="card-title">
                        <i class="bi bi-globe me-2"></i>WebSpark.HttpClientUtility
                    </h1>
                    <h5 class="card-subtitle">HTTP Client Decorator Pattern Implementation</h5>
                </div>
                <div class="card-body">
                    <div class="alert alert-info" role="alert">
                        <strong>Current Package Version:</strong> 1.0.5
                    </div>

                    <h2 class="border-bottom pb-2 mb-4">Overview</h2>
                    <p class="lead">
                        WebSpark.HttpClientUtility is a powerful NuGet package that implements the decorator pattern
                        for HttpClient in .NET applications. It provides resilience, telemetry, caching, and other
                        advanced HTTP client capabilities through a clean, extensible design.
                    </p>

                    <h2 class="border-bottom pb-2 mb-4">Package References</h2>
                    <div class="bg-light p-3 rounded mb-4">
                        <pre
                            class="mb-0"><code>&lt;PackageReference Include="WebSpark.HttpClientUtility" Version="1.0.5" /&gt;</code></pre>
                    </div>

                    <h2 class="border-bottom pb-2 mb-4">Key Features</h2>
                    <div class="row">
                        <div class="col-md-6">
                            <div class="card mb-3 h-100">
                                <div class="card-body">
                                    <h5><i class="bi bi-layers me-2"></i>Decorator Pattern Implementation</h5>
                                    <p>Cleanly stack capabilities like caching, retries, and logging around your HTTP
                                        calls.</p>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="card mb-3 h-100">
                                <div class="card-body">
                                    <h5><i class="bi bi-arrow-repeat me-2"></i>Polly Integration</h5>
                                    <p>Resilience policies for retry, circuit breaker, and more using Polly.</p>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="card mb-3 h-100">
                                <div class="card-body">
                                    <h5><i class="bi bi-speedometer2 me-2"></i>Telemetry</h5>
                                    <p>Built-in telemetry to track request performance, errors, and patterns.</p>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="card mb-3 h-100">
                                <div class="card-body">
                                    <h5><i class="bi bi-database me-2"></i>Caching</h5>
                                    <p>Response caching to improve performance and reduce external API calls.</p>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="card mb-3 h-100">
                                <div class="card-body">
                                    <h5><i class="bi bi-gear-wide-connected me-2"></i>Concurrent Processing</h5>
                                    <p>Tools for managing concurrent HTTP requests with controlled parallelism.</p>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="card mb-3 h-100">
                                <div class="card-body">
                                    <h5><i class="bi bi-filetype-xml me-2"></i>Content Conversion</h5>
                                    <p>Built-in serialization/deserialization between JSON and strongly-typed objects.
                                    </p>
                                </div>
                            </div>
                        </div>
                    </div>

                    <h2 class="border-bottom pb-2 mb-4">Implementation in This Application</h2>
                    <p>
                        In this application, WebSpark.HttpClientUtility is used to demonstrate the Decorator Pattern,
                        with several layers of functionality added to the base HttpClient.
                    </p>

                    <h4 class="mt-4">1. HTTP Client Registration</h4>
                    <div class="bg-light p-3 rounded mb-4">
                        <pre><code>builder.Services.AddHttpClient("HttpClientDecorator", client =>
{
    client.Timeout = TimeSpan.FromMilliseconds(30000);
    client.DefaultRequestHeaders.Add("Accept", "application/json");
    client.DefaultRequestHeaders.Add("User-Agent", "HttpClientDecorator");
    client.DefaultRequestHeaders.Add("X-Request-ID", Guid.NewGuid().ToString());
    client.DefaultRequestHeaders.Add("X-Request-Source", "HttpClientDecorator");
});</code></pre>
                    </div>

                    <h4 class="mt-4">2. Decorator Pattern Implementation</h4>
                    <p>
                        The application showcases a layered approach to decorating the HTTP client with various
                        capabilities:
                    </p>
                    <div class="bg-light p-3 rounded mb-4">
                        <pre><code>// HTTP Send Service with Decorator Pattern
builder.Services.AddSingleton(serviceProvider =>
{
    var configuration = serviceProvider.GetRequiredService&lt;IConfiguration&gt;();
    var retryOptions = configuration.GetSection("HttpRequestResultPollyOptions").Get&lt;HttpRequestResultPollyOptions&gt;();

    // Base service - core HTTP functionality
    IHttpRequestResultService baseService = new HttpRequestResultService(
        serviceProvider.GetRequiredService&lt;ILogger&lt;HttpRequestResultService&gt;&gt;(),
        configuration,
        serviceProvider.GetRequiredService&lt;IHttpClientFactory&gt;().CreateClient("HttpClientDecorator"));

    // Polly decorator - adds retries and circuit breaker
    IHttpRequestResultService pollyService = new HttpRequestResultServicePolly(
        serviceProvider.GetRequiredService&lt;ILogger&lt;HttpRequestResultServicePolly&gt;&gt;(),
        baseService,
        retryOptions);

    // Telemetry decorator - adds performance tracking
    IHttpRequestResultService telemetryService = new HttpRequestResultServiceTelemetry(
        serviceProvider.GetRequiredService&lt;ILogger&lt;HttpRequestResultServiceTelemetry&gt;&gt;(),
        pollyService);

    // Cache decorator - adds response caching
    IHttpRequestResultService cacheService = new HttpRequestResultServiceCache(
        telemetryService,
        serviceProvider.GetRequiredService&lt;ILogger&lt;HttpRequestResultServiceCache&gt;&gt;(),
        serviceProvider.GetRequiredService&lt;IMemoryCache&gt;());

    return cacheService;
});</code></pre>
                    </div>

                    <h4 class="mt-4">3. Usage Example - Concurrent Processing</h4>
                    <p>
                        The List page demonstrates using the HttpClientConcurrentProcessor for parallel requests:
                    </p>
                    <div class="bg-light p-3 rounded mb-4">
                        <pre><code>// Example code 
public class ListModel
{
    private readonly IHttpRequestResultService _getCallService;
    private readonly IConfiguration _configuration;

    public ListModel(IHttpRequestResultService getCallService, IConfiguration configuration)
    {
        _getCallService = getCallService;
        _configuration = configuration;
    }

    public IList&lt;HttpRequestResult&lt;SiteStatus&gt;&gt; HttpGetCallResults { get; set; } = default!;

    public async Task OnGetAsync(CancellationToken ct = default)
    {
        string requestUrl = _configuration.GetValue&lt;string&gt;("RequestUrl") 
            ?? "https://asyncdemo.azurewebsites.net/status";
            
        var taskProcessor = new HttpClientConcurrentProcessor(
            taskId => new HttpClientConcurrentModel(taskId, requestUrl), 
            _getCallService);
            
        List&lt;HttpClientConcurrentModel&gt; results = await taskProcessor.RunAsync(10, 1, ct);
        HttpGetCallResults = results.Select(s => s.StatusCall).ToList();
    }
}</code></pre>
                    </div>

                    <h2 class="border-bottom pb-2 mb-4">Core Components</h2>
                    <div class="accordion" id="componentsAccordion">
                        <div class="accordion-item">
                            <h2 class="accordion-header" id="headingOne">
                                <button class="accordion-button" type="button" data-bs-toggle="collapse"
                                    data-bs-target="#collapseOne" aria-expanded="true" aria-controls="collapseOne">
                                    HTTP Request/Response Models
                                </button>
                            </h2>
                            <div id="collapseOne" class="accordion-collapse collapse show" aria-labelledby="headingOne"
                                data-bs-parent="#componentsAccordion">
                                <div class="accordion-body">
                                    <h5>HttpClientSendRequest&lt;T&gt;</h5>
                                    <p>Container for HTTP request data including:</p>
                                    <ul>
                                        <li>Request Path/URI</li>
                                        <li>Request Body (for POST/PUT)</li>
                                        <li>Completion Date & Elapsed Time</li>
                                        <li>Error information</li>
                                        <li>Response Results</li>
                                    </ul>

                                    <h5>HttpResponseContent&lt;T&gt;</h5>
                                    <p>Strongly-typed wrapper for HTTP responses with:</p>
                                    <ul>
                                        <li>Typed content</li>
                                        <li>Status code information</li>
                                        <li>Error messages</li>
                                        <li>Success/failure indication</li>
                                        <li>Static Success/Failure factory methods</li>
                                    </ul>
                                </div>
                            </div>
                        </div>
                        <div class="accordion-item">
                            <h2 class="accordion-header" id="headingTwo">
                                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse"
                                    data-bs-target="#collapseTwo" aria-expanded="false" aria-controls="collapseTwo">
                                    Decorator Services
                                </button>
                            </h2>
                            <div id="collapseTwo" class="accordion-collapse collapse" aria-labelledby="headingTwo"
                                data-bs-parent="#componentsAccordion">
                                <div class="accordion-body">
                                    <h5>IHttpClientSendService</h5>
                                    <p>Base interface implemented by all decorator services.</p>

                                    <h5>HttpClientSendService</h5>
                                    <p>The core service for sending HTTP requests, handling:</p>
                                    <ul>
                                        <li>Asynchronous HTTP requests</li>
                                        <li>Exception handling</li>
                                        <li>Logging</li>
                                        <li>JSON serialization/deserialization</li>
                                    </ul>

                                    <h5>HttpRequestResultServicePolly</h5>
                                    <p>Adds Polly policies for resilience:</p>
                                    <ul>
                                        <li>Retry with exponential backoff</li>
                                        <li>Circuit breaker for fault isolation</li>
                                        <li>Configurable retry limits and timing</li>
                                    </ul>

                                    <h5>HttpRequestResultServiceTelemetry</h5>
                                    <p>Adds telemetry capabilities:</p>
                                    <ul>
                                        <li>Request/response time tracking</li>
                                        <li>Error rate monitoring</li>
                                        <li>Performance metrics</li>
                                    </ul>

                                    <h5>HttpRequestResultServiceCache</h5>
                                    <p>Adds response caching:</p>
                                    <ul>
                                        <li>In-memory caching of responses</li>
                                        <li>Configurable cache duration</li>
                                        <li>Cache key generation</li>
                                    </ul>
                                </div>
                            </div>
                        </div>
                        <div class="accordion-item">
                            <h2 class="accordion-header" id="headingThree">
                                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse"
                                    data-bs-target="#collapseThree" aria-expanded="false" aria-controls="collapseThree">
                                    Concurrent Processing
                                </button>
                            </h2>
                            <div id="collapseThree" class="accordion-collapse collapse" aria-labelledby="headingThree"
                                data-bs-parent="#componentsAccordion">
                                <div class="accordion-body">
                                    <h5>ConcurrentProcessor&lt;T&gt;</h5>
                                    <p>Base class for concurrent task processing with:</p>
                                    <ul>
                                        <li>Configurable concurrency limits</li>
                                        <li>Task queuing and execution</li>
                                        <li>Semaphore management</li>
                                        <li>Cancellation support</li>
                                    </ul>

                                    <h5>HttpClientConcurrentProcessor</h5>
                                    <p>Specialized processor for concurrent HTTP requests:</p>
                                    <ul>
                                        <li>Task-based concurrency model</li>
                                        <li>Automatic task chaining</li>
                                        <li>HTTP call abstraction</li>
                                    </ul>

                                    <h5>Usage Example</h5>
                                    <div class="bg-light p-3 rounded">
                                        <pre><code>// Example code
var processor = new HttpClientConcurrentProcessor(
    taskId => new HttpClientConcurrentModel(taskId, "https://api.example.com/data"),
    httpClientService);
    
var results = await processor.RunAsync(maxTasks: 10, maxConcurrency: 3, cancellationToken);</code></pre>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <h2 class="border-bottom pb-2 mb-4 mt-4">Benefits of Decorator Pattern</h2>
                    <div class="row">
                        <div class="col-md-6">
                            <div class="card mb-3 h-100 border-success">
                                <div class="card-body">
                                    <h5><i class="bi bi-puzzle me-2"></i>Modularity</h5>
                                    <p>Each decorator adds a single responsibility, making code easier to maintain and
                                        test.</p>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="card mb-3 h-100 border-success">
                                <div class="card-body">
                                    <h5><i class="bi bi-stack me-2"></i>Composability</h5>
                                    <p>Mix and match decorators as needed, adding only the functionality required.</p>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="card mb-3 h-100 border-success">
                                <div class="card-body">
                                    <h5><i class="bi bi-arrow-up-right-circle me-2"></i>Extensibility</h5>
                                    <p>Add new decorators without changing existing code (Open/Closed Principle).</p>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="card mb-3 h-100 border-success">
                                <div class="card-body">
                                    <h5><i class="bi bi-shield-check me-2"></i>Separation of Concerns</h5>
                                    <p>Each decorator has a single responsibility, making logic clearer and more
                                        focused.</p>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="card-footer text-muted">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <a href="https://www.nuget.org/packages/WebSpark.HttpClientUtility" class="btn btn-primary"
                                target="_blank">
                                <i class="bi bi-box me-2"></i>NuGet Package
                            </a>
                            <a href="https://github.com/markhazleton/HttpClientDecoratorPattern"
                                class="btn btn-outline-secondary ms-2" target="_blank">
                                <i class="bi bi-github me-2"></i>GitHub Repository
                            </a>
                        </div>
                        <span>Last Updated: May 8, 2025</span>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-lg-4">
            <partial name="_ThemeInfo" />

            <div class="card border-info mb-4 shadow">
                <div class="card-header bg-info text-white">
                    <h4 class="card-title mb-0">Related NuGet Packages</h4>
                </div>
                <div class="card-body">
                    <div class="list-group">
                        <a href="/BootswatchDoc"
                            class="list-group-item list-group-item-action d-flex justify-content-between align-items-center">
                            WebSpark.Bootswatch
                            <span class="badge bg-primary rounded-pill">1.0.6</span>
                        </a>
                        <a href="https://www.nuget.org/packages/Polly/" class="list-group-item list-group-item-action"
                            target="_blank">
                            Polly
                        </a>
                        <a href="https://www.nuget.org/packages/Microsoft.Extensions.Http.Polly/"
                            class="list-group-item list-group-item-action" target="_blank">
                            Microsoft.Extensions.Http.Polly
                        </a>
                    </div>
                </div>
            </div>

            <div class="card border-success mb-4 shadow">
                <div class="card-header bg-success text-white">
                    <h4 class="card-title mb-0">Pages Using WebSpark.HttpClientUtility</h4>
                </div>
                <div class="card-body">
                    <div class="list-group">
                        <a href="/List" class="list-group-item list-group-item-action">
                            <i class="bi bi-list-ul me-2"></i>List - Concurrent Processing
                        </a>
                        <a href="/CircuitBreaker" class="list-group-item list-group-item-action">
                            <i class="bi bi-exclamation-triangle me-2"></i>Circuit Breaker - Resilience
                        </a>
                        <a href="/Joke" class="list-group-item list-group-item-action">
                            <i class="bi bi-emoji-laughing me-2"></i>Joke - HTTP GET with Decorators
                        </a>
                        <a href="/ArtInstitute" class="list-group-item list-group-item-action">
                            <i class="bi bi-brush me-2"></i>Art Institute - Complex Models
                        </a>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
















