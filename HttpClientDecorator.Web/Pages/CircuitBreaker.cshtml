@page
@model HttpClientDecorator.Web.Pages.CircuitBreakerModel

@{
    ViewData["Title"] = "Circuit Breaker";
}
<h1>Async Calls</h1>

<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.HttpGetCallResults[0].CompletionDate)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.HttpGetCallResults[0].ElapsedMilliseconds)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.HttpGetCallResults[0].Iteration)
            </th>
            <th>
                Return Values
            </th>
            <th>
                @Html.DisplayNameFor(model => model.HttpGetCallResults[0].ErrorList)
            </th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model.HttpGetCallResults)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.CompletionDate)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.ElapsedMilliseconds)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Iteration)
                </td>
                <td>
                    loops: @Html.Raw(item.ResponseResults?.loopCount) <br />
                    maxRun: @Html.Raw(item.ResponseResults?.maxTimeMS) <br />
                    value: @Html.Raw(item.ResponseResults?.resultValue) <br />
                    runtime: @Html.Raw(item.ResponseResults?.runTimeMS) <br />
                </td>
                <td>
                    @foreach (var error in item.ErrorList)
                    {
                            @error<br />
                    }
                </td>
            </tr>
        }
    </tbody>
</table>
